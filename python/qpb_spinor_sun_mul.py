#!/usr/bin/python
import sympy as sy
import textwrap
I = sy.I
wrap = textwrap.wrap
NWRAP = 72
NS = 4

comment = [
    "/*\n",
    "   This file was generated by a python script\n",
    "   Look into the ../python/ subdir for more info\n",
    "*/\n"]

fp = open("qpb_spinor_sun_mul.h", "w")
fp.write("#ifndef _QPB_SPINOR_SUN_MUL_H\n" + 
         "#define _QPB_SPINOR_SUN_MUL_H 1\n" + 
         "#include <qpb_types.h>\n\n")
for line in comment:
    fp.write(line)
for NC in [1, 3]:
    fp.write("#if NC == %d\n" % NC)
    pr = sy.zeros((NS, NC))
    pi = sy.zeros((NS, NC))
    ur = sy.zeros((NC, NC))
    ui = sy.zeros((NC, NC))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC
            pr[cs] = sy.Symbol('(p+%2d)->re' % cs, real=True)
            pi[cs] = sy.Symbol('(p+%2d)->im' % cs, real=True)
    p = sy.Matrix(NS, NC, lambda i, j: pr[j+i*NC] + pi[j+i*NC]*I)

    for i in range(NC):
        for j in range(NC):
            k = j + i*NC
            ur[k] = sy.Symbol('(u+%2d)->re' % k, real=True)
            ui[k] = sy.Symbol('(u+%2d)->im' % k, real=True)
    u = sy.Matrix(NC, NC, lambda i, j: ur[j+i*NC] + ui[j+i*NC]*I)

    ### U * psi
    fp.write("__inline__ void\n")
    fp.write("spinor_sun_mul(qpb_complex *q, qpb_complex *u, qpb_complex *p)\n{\n")
    q = sy.Matrix(NS, NC, lambda i, j: u[j, :].dot(p[i, :]))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC            
            reim = q[i, j].as_real_imag()

            fp.write("  (q+%2d)->re = \n" % cs)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("\t%s\n" % line)

            fp.write("  (q+%2d)->im = \n" % cs)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("\t%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### += U * psi
    fp.write("__inline__ void\n")
    fp.write("spinor_sun_peq_mul(qpb_complex *q, qpb_complex *u, qpb_complex *p)\n{\n")
    q = sy.Matrix(NS, NC, lambda i, j: u[j, :].dot(p[i, :]))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC            
            reim = q[i, j].as_real_imag()

            fp.write("  (q+%2d)->re += \n" % cs)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("\t%s\n" % line)

            fp.write("  (q+%2d)->im += \n" % cs)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("\t%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### -= U * psi
    fp.write("__inline__ void\n")
    fp.write("spinor_sun_meq_mul(qpb_complex *q, qpb_complex *u, qpb_complex *p)\n{\n")
    q = sy.Matrix(NS, NC, lambda i, j: u[j, :].dot(p[i, :]))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC            
            reim = q[i, j].as_real_imag()

            fp.write("  (q+%2d)->re -= \n" % cs)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("\t%s\n" % line)

            fp.write("  (q+%2d)->im -= \n" % cs)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("\t%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### U^+ * psi
    fp.write("__inline__ void\n")
    fp.write("spinor_sun_dag_mul(qpb_complex *q, qpb_complex *u, qpb_complex *p)\n{\n")
    q = sy.Matrix(NS, NC, lambda i, j: u.conjugate().transpose()[j, :].dot(p[i, :]))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC            
            reim = q[i, j].as_real_imag()

            fp.write("  (q+%2d)->re = \n" % cs)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("\t%s\n" % line)

            fp.write("  (q+%2d)->im = \n" % cs)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("\t%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### += U^+ * psi
    fp.write("__inline__ void\n")
    fp.write("spinor_sun_dag_peq_mul(qpb_complex *q, qpb_complex *u, qpb_complex *p)\n{\n")
    q = sy.Matrix(NS, NC, lambda i, j: u.conjugate().transpose()[j, :].dot(p[i, :]))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC            
            reim = q[i, j].as_real_imag()

            fp.write("  (q+%2d)->re += \n" % cs)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("\t%s\n" % line)

            fp.write("  (q+%2d)->im += \n" % cs)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("\t%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### -= U^+ * psi
    fp.write("__inline__ void\n")
    fp.write("spinor_sun_dag_meq_mul(qpb_complex *q, qpb_complex *u, qpb_complex *p)\n{\n")
    q = sy.Matrix(NS, NC, lambda i, j: u.conjugate().transpose()[j, :].dot(p[i, :]))
    for i in range(NS):
        for j in range(NC):
            cs = j + i*NC            
            reim = q[i, j].as_real_imag()

            fp.write("  (q+%2d)->re -= \n" % cs)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("\t%s\n" % line)

            fp.write("  (q+%2d)->im -= \n" % cs)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("\t%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    fp.write("#endif /* NC == %d */\n\n\n" % NC)
fp.write("#endif /* _QPB_SPINOR_SUN_MUL_H */\n")
fp.close()
