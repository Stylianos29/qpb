#!/usr/bin/python
import sympy as sy
import textwrap
I = sy.I
wrap = textwrap.wrap
NWRAP = 72
NS = 4

comment = [
    "/*\n",
    "   This file was generated by a python script\n",
    "   Look into the ../python/ subdir for more info\n",
    "*/\n"]

fp = open("qpb_sun_utils.h", "w")
fp.write("#ifndef _QPB_SUN_UTILS_H\n" + 
         "#define _QPB_SUN_UTILS_H 1\n" + 
         "#include <qpb_types.h>\n\n")
for line in comment:
    fp.write(line)
for NC in [1, 3]:
    fp.write("#if NC == %d\n" % NC)
    xr = sy.zeros((NC, NC))
    xi = sy.zeros((NC, NC))

    yr = sy.zeros((NC, NC))
    yi = sy.zeros((NC, NC))

    ar = sy.Symbol('a.re', real=True)
    ai = sy.Symbol('a.im', real=True)
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC
            xr[k] = sy.Symbol('(x+%2d)->re' % k, real=True)
            xi[k] = sy.Symbol('(x+%2d)->im' % k, real=True)

            yr[k] = sy.Symbol('(y+%2d)->re' % k, real=True)
            yi[k] = sy.Symbol('(y+%2d)->im' % k, real=True)
    x = sy.Matrix(NC, NC, lambda i, j: xr[j+i*NC] + xi[j+i*NC]*I)
    y = sy.Matrix(NC, NC, lambda i, j: yr[j+i*NC] + yi[j+i*NC]*I)
    
    ### x = y
    fp.write("__inline__ void\n")
    fp.write("sun_uequ(qpb_complex *z, qpb_complex *x)\n{\n")
    z = x
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC            
            reim = z[i, j].as_real_imag()

            fp.write("  (z+%2d)->re = " % k)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("%s\n" % line)

            fp.write("  (z+%2d)->im = " % k)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### x = y^+
    fp.write("__inline__ void\n")
    fp.write("sun_ueqd(qpb_complex *z, qpb_complex *x)\n{\n")
    z = x.conjugate().transpose()
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC            
            reim = z[i, j].as_real_imag()

            fp.write("  (z+%2d)->re = " % k)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("%s\n" % line)

            fp.write("  (z+%2d)->im = " % k)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### x + y
    fp.write("__inline__ void\n")
    fp.write("sun_upu(qpb_complex *z, qpb_complex *x, qpb_complex *y)\n{\n")
    z = x + y
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC            
            reim = z[i, j].as_real_imag()

            fp.write("  (z+%2d)->re = " % k)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("%s\n" % line)

            fp.write("  (z+%2d)->im = " % k)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### y += x
    fp.write("__inline__ void\n")
    fp.write("sun_upequ(qpb_complex *z, qpb_complex *x)\n{\n")
    z = x
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC            
            reim = z[i, j].as_real_imag()

            fp.write("  (z+%2d)->re += " % k)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("%s\n" % line)

            fp.write("  (z+%2d)->im += " % k)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### x - y
    fp.write("__inline__ void\n")
    fp.write("sun_umu(qpb_complex *z, qpb_complex *x, qpb_complex *y)\n{\n")
    z = x - y
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC            
            reim = z[i, j].as_real_imag()

            fp.write("  (z+%2d)->re = " % k)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("%s\n" % line)

            fp.write("  (z+%2d)->im = " % k)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### y -= x
    fp.write("__inline__ void\n")
    fp.write("sun_umequ(qpb_complex *z, qpb_complex *x)\n{\n")
    z = x
    for i in range(NC):
        for j in range(NC):
            k = j + i*NC            
            reim = z[i, j].as_real_imag()

            fp.write("  (z+%2d)->re -= " % k)
            for line in wrap(str(reim[0])+";", NWRAP):
                fp.write("%s\n" % line)

            fp.write("  (z+%2d)->im -= " % k)
            for line in wrap(str(reim[1])+";", NWRAP):
                fp.write("%s\n" % line)

        fp.write("\n")
    fp.write("  return;\n}\n\n")

    ### y -= x
    fp.write("__inline__ qpb_double\n")
    fp.write("sun_trace(qpb_complex *x)\n{\n")
    z = x.trace().as_real_imag()[0]
    fp.write("  return %s;\n}\n\n" % z)

    fp.write("#endif /* NC == %d */\n\n\n" % NC)
fp.write("#endif /* _QPB_SUN_UTILS_H */\n")
fp.close()
